#+LATEX_CLASS: article
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+OPTIONS: toc:nil
#+DATE:
#+AUTHOR: Dr. Miguel Carrillo Barajas \\
#+AUTHOR: Sara Doris Montes Incin \\
#+AUTHOR: Mauricio Esquivel Reyes \\
#+TITLE: Sesión de laboratorio 04 \\
#+TITLE: Lógica Computacional

* Lógica
** Implementación de la semántica
*** Variables de una formula
#+begin_src haskell
varsOf :: PL -> [Indice]
varsOf phi = case phi of
  Top -> [] 
  Bot -> []
  Var v -> [v]
  Oneg alpha -> varsOf alpha
  alpha `Oand` beta -> (varsOf alpha) `union` (varsOf beta)
  alpha `Oor`  beta -> (varsOf alpha) `union` (varsOf beta)
  alpha `Oimp` beta -> (varsOf alpha) `union` (varsOf beta)
#+end_src
*** Variables de un conjunto de formulas
#+begin_src haskell
varsOfPhiList :: [PL] -> [Indice]
varsOfPhiList phiL = case phiL of
                        []      -> []
                        f:lf    -> (varsOf f) `union` (varsOfPhiList lf)
#+end_src
*** Satisface modelo a Gamma
#+begin_src haskell
satModGamma :: Modelo -> [PL] -> Bool
satModGamma m gammaL = and [satMod m alpha | alpha <- gammaL] 
#+end_src
*** Genera modelos
#+begin_src haskell
genModels :: [Indice] -> [Modelo]
genModels lv = powerSet lv
#+end_src
*** Implicación Lógica (Consecuencia Semántica)
Sea $\sigma$ una valuación, $\phi$ una proposición de la LP y $\gamma$ un subconjunto de proposiciones de la LP.
Decimos que $\gamma$ implica lógicamente a $\phi$ si y solo si todos los modelos que satisfacen a $\gamma$ también satisfacen a $\phi$.  
#+begin_src haskell
impLogicamente :: [PL] -> PL -> Bool
impLogicamente gammaL phi = and [(satModGamma m gammaL) `opImp` (satMod m phi) | 
                                    m <- genModels varsOfGammaPhi ]
    where
    varsOfGammaPhi  = varsOfPhiList (phi: gammaL)
    opImp :: Bool->Bool -> Bool
    opImp g h= not g || h
#+end_src
*** Equivalencia Lógica
Sean $\phi$ y $\psi$ formulas de la LP, decimos que son lógicamente equivalentes si y solo si
$\phi \models \psi$ y $\psi \models \phi$
#+begin_src haskell
logEquivalentes :: PL -> PL -> Bool
logEquivalentes phi psi = (impLogicamente [phi] psi) && (impLogicamente [psi] phi)
#+end_src
** Sistema L de Lukasiewicz
Un sistema de deducción al estilo Hilbert para la PLI.
*** Definición
\[PLI ::= Bot | v<Indice> | (PLI \to PLI) \]
\[ <Indice> ::= [i | i \in \mathbb{N}]\]

Sea $f \in PLI$. La negación de f se define mediante $\neg f = (f \to Bot)$
*** Definición en Haskell
#+begin_src haskell
--Tipo de datos para indices de variables
type Indice = Int

-- Tipo de datos para formulas de la PLI
data PLI = Bot | Var Indice | Oimp PLI PLI 
        deriving (Eq,Show,Ord,Read)
#+end_src
*** Axiomas
Axiomas para toda $\alpha$, $\beta$ y $\gamma$ en PLI:
 * L1. $\alpha \to (\beta \to \alpha)$
 * L2. $(\alpha \to (\beta \to \gamma)) \to ((\alpha \to \beta) \to (\alpha \to \gamma))$
 * L3. $(\neg \alpha \to \neg \beta) \to (\beta \to \alpha)$
*** Modus Ponens
Teniendo a $\alpha$ y $\alpha \to \beta$ se puede inferir $\beta$

Def. Sean $\phi \in$ PLI y $\Gamma \subset$ PLI.
Decimos que $\phi$ se deduce de $\gamma$ en el sistema L, $\gamma \vdash \phi$ si existe una
lista finita de formulas $\psi_1,\psi_2,\dots,\psi_n \in$ PLI, tal que:
 * $\psi_n = \phi$
 * Para toda $k \in {1,\dots,n}$ se cumplen:
  * $\psi_k \in \Gamma$ (premisa)
  * $\psi_k$ es una instancia de un axioma de L.
  * Existe $i,j < k$ tales que $\psi_k$ es resultado de aplicar MP a $\psi_i$ y $\psi_j$. (MP i,j)
*** Funciones
**** Función que muestre las formulas
#+begin_src haskell 
showPLI :: PLI -> String
showPLI phi = case phi of
  Bot                            -> "FF" 
  Var v                          -> "v"++show v
  Oimp Bot Bot                   -> "TT"
  (a`Oimp`(b`Oimp`Bot))`Oimp`Bot -> "("++ (showPLI a) ++" & "++ (showPLI b) ++")"
  (alpha `Oimp` Bot) `Oimp` beta -> "("++ (showPLI alpha) ++" | "++ (showPLI beta) ++")"
  Oimp alpha Bot                 -> "~("++ (showPLI alpha) ++")"
  Oimp alpha beta                -> "("++ (showPLI alpha) ++" -> "++ (showPLI beta) ++")" 
#+end_src
**** Operadores faltantes
***** oNeg
#+begin_src haskell
oNeg :: PLI -> PLI 
oNeg alpha = Oimp alpha Bot 
#+end_src
***** oTop
#+begin_src haskell 
oTop :: PLI
oTop = Oimp Bot Bot
#+end_src
***** oAnd
#+begin_src haskell
oAnd :: PLI -> PLI -> PLI
oAnd alpha beta = (alpha `Oimp` (beta `Oimp` Bot)) `Oimp` Bot
#+end_src
***** oOr
#+begin_src haskell
oOr :: PLI -> PLI -> PLI
oOr alpha beta = (alpha `Oimp` Bot) `Oimp` beta
#+end_src
* Práctica urgente
** Ultimos n elementos de una lista
#+begin_src haskell
ultimN :: [a] -> Int -> [a]
#+end_src
** Hay implicaciones
#+begin_src haskell
hayImplicaciones :: PL -> Bool
#+end_src
** Conjunciones de una formula
#+begin_src haskell
conj :: PL -> [PL]
#+end_src
** Elimina disyunciones
#+begin_src haskell
quitaDisy :: PL -> PL
#+end_src
